{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { WorkStations } from 'src/app/entities/topglove.domain.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../services/loading.service\";\nimport * as i4 from \"src/app/services/user.service\";\nimport * as i5 from \"src/app/services/notification.service\";\nimport * as i6 from \"src/app/services/api.service\";\nimport * as i7 from \"@ionic/angular\";\nexport let LoginPage = /*#__PURE__*/(() => {\n  class LoginPage {\n    constructor(router, fb, loadingService, userService, toast, apiService) {\n      this.router = router;\n      this.fb = fb;\n      this.loadingService = loadingService;\n      this.userService = userService;\n      this.toast = toast;\n      this.apiService = apiService;\n      this.workStations = WorkStations.data;\n\n      this.generateLoginForm = () => {\n        this.loginForm = this.fb.group({\n          userName: ['', Validators.required],\n          workStation: ['', Validators.required]\n        });\n      };\n\n      this.doLogin = () => {\n        if (this.loginForm.dirty && this.loginForm.valid) {\n          const user = this.loginForm.value.userName.toLowerCase();\n          const workStation = this.loginForm.value.workStation.toLowerCase(); // this.userService.WorkStation = workStation;\n          // this.userService.User = user;\n          // this.userService.IsSuperUser = false;\n          // this.router.navigate(['/tabs'], { replaceUrl: true });\n\n          this.loadingService.show();\n          this.apiService.doLogin({\n            userId: user\n          }).subscribe(res => {\n            this.loadingService.hide();\n\n            if (res) {\n              this.userService.User = res.userId;\n              this.userService.WorkStation = workStation;\n\n              if (res.isSuperUser) {\n                this.userService.IsSuperUser = true;\n                this.router.navigate(['/tabs/tab3'], {\n                  replaceUrl: true\n                });\n              } else {\n                this.userService.IsSuperUser = false;\n                this.router.navigate(['/tabs'], {\n                  replaceUrl: true\n                });\n              }\n            } else {\n              this.toast.error('Please enter valid username');\n            }\n          }, error => {\n            console.log(error);\n            this.loadingService.hide();\n            this.toast.error('Unable to validate user. Please try agian after sometime.');\n          });\n        }\n      };\n\n      this.generateLoginForm();\n    }\n\n    ngOnInit() {}\n\n  }\n\n  LoginPage.ɵfac = function LoginPage_Factory(t) {\n    return new (t || LoginPage)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.LoadingService), i0.ɵɵdirectiveInject(i4.UserService), i0.ɵɵdirectiveInject(i5.NotificationService), i0.ɵɵdirectiveInject(i6.ApiService));\n  };\n\n  LoginPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginPage,\n    selectors: [[\"app-login\"]],\n    decls: 10,\n    vars: 1,\n    consts: [[\"padding\", \"\", 3, \"fullscreen\"], [1, \"login-card\"], [1, \"mt-5\"], [\"position\", \"stacked\", 1, \"mt-5\"], [\"type\", \"text\", \"placeholder\", \"\"]],\n    template: function LoginPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-content\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"ion-col\", 2);\n        i0.ɵɵelementStart(3, \"ion-label\", 3);\n        i0.ɵɵtext(4, \"Product Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"ion-input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-col\");\n        i0.ɵɵelementStart(7, \"ion-label\", 3);\n        i0.ɵɵtext(8, \"Product Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"ion-input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i7.IonContent, i7.IonCol, i7.IonLabel, i7.IonInput, i7.TextValueAccessor],\n    styles: [\".login-card[_ngcontent-%COMP%]{padding:20px;width:400px;background-color:#f7f7f7;margin:auto;border-radius:2px;box-shadow:0 3px 8px 3px #00000024;overflow:hidden;position:relative;top:15%}.login-card[_ngcontent-%COMP%]   ion-input[_ngcontent-%COMP%]{border:1px solid #16438b!important;border-radius:5px}.login-card[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin-top:20px!important}.login-card[_ngcontent-%COMP%]   ion-input[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{border-right:1px solid #16438b;padding:13px;font-size:20px;color:#16438b;margin-left:5px}.login-card[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%]{height:44px;font-size:16px;width:100%;margin-bottom:10px;-webkit-appearance:none;background:#fff;text-align:center;padding:0 8px;box-sizing:border-box;-moz-box-sizing:border-box}.login-card[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%]:hover{border:1px solid #b9b9b9;border-top:1px solid #a0a0a0;box-shadow:inset 0 1px 2px #0000001a}.login-card[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none;color:#666;font-weight:400;text-align:center;display:inline-block;opacity:.6;transition:opacity ease .5s}.login-card[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{opacity:1}ion-item[_ngcontent-%COMP%]{border:1px solid #16438b!important;border-radius:5px;--background: transparent;height:44px;box-sizing:border-box;-moz-box-sizing:border-box;display:flex}ion-item[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{border-right:1px solid #16438b;font-size:20px;color:#16438b;height:100%;height:-moz-available;height:-webkit-fill-available;padding:0 12px;margin-left:-9px}ion-item[_ngcontent-%COMP%]   ion-select[_ngcontent-%COMP%]{margin:auto}\"]\n  });\n  return LoginPage;\n})();","map":null,"metadata":{},"sourceType":"module"}